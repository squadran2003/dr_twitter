{"version":3,"sources":["logo.svg","Components/nav/nav.js","Components/csrfToken.js","Components/tweet/tweet.js","Components/tweet/newTweet.js","Components/comments/comments.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","linkStyle","color","textDecoration","fontSize","fontWeight","className","style","to","href","CsrfToken","getCookie","name","value","document","cookie","split","forEach","c","m","trim","match","undefined","decodeURIComponent","token","this","props","get_token","Fragment","type","Component","Tweet","getToken","setState","csrfMiddleWareToken","addLikes","Request","post","set","state","send","parseInt","tweet","id","then","response","console","log","data","catch","error","tweetId","React","createRef","src","username","likes","length","aria-hidden","onClick","retweets","comments","NewTweet","form_submit","e","preventDefault","onSubmit","method","rows","cols","onChange","target","Comments","fetchComments","url","params","fetch","json","componentWillMount","followUser","formSubmit","newComment","map","comment","user","App","getLoggedInUser","reload_tweets","tweets","class","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.70d96554.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport {Link } from 'react-router-dom'; \nimport nav from './nav.css';\n\nfunction Nav(){\n    const linkStyle={\n        color:'white',\n        textDecoration: 'none',\n        fontSize: '1.2em',\n        fontWeight: 'bold'\n    }\n    return (\n        <div>\n            <nav className=\"nav-container\">\n                <ul className=\"nav\">\n                <li className=\"link\"><Link style={linkStyle} to=\"/\">Home</Link></li>\n                <li className=\"link\"><Link style={linkStyle} to=\"/add\">Add New Tweet</Link></li>\n                <li className=\"link\"><Link style={linkStyle} to=\"/profile\">Profile </Link></li>\n                \n                <li className=\"last-link\"><a href=\"/logout/\">Logout</a></li>\n\n                </ul>\n            </nav>\n        </div>\n      );\n    \n}\n\n\nexport default Nav;","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass CsrfToken extends Component {\n\n  getCookie = name => {\n    var value;\n    if (document.cookie && document.cookie !== \"\") {\n      document.cookie.split(\";\").forEach(function(c) {\n        var m = c.trim().match(/(\\w+)=(.*)/);\n        if (m !== undefined && m[1] === name) {\n          value = decodeURIComponent(m[2]);\n        }\n      });\n    }\n    return value;\n  };\n  componentDidMount() {\n    const token = this.getCookie(\"csrftoken\");\n    this.props.get_token(token);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <input\n          type=\"hidden\"\n          name=\"csrfmiddlewaretoken\"\n          value={this.getCookie(\"csrftoken\")}\n        />\n      </React.Fragment>\n    );\n  }\n}\nCsrfToken.propTypes = {\n  get_token: PropTypes.func.isRequired\n};\n\nexport default CsrfToken;\n","import React, { Component } from 'react';\nimport {Link } from 'react-router-dom'; \nimport tweet from './tweet.css';\nimport Request from \"superagent\";\nimport  CsrfToken from '../csrfToken';\n\nclass Tweet extends Component {\n    constructor(props){\n        super(props);\n        this.tweetId = React.createRef();\n        this.csrfMiddleWareToken = \"\";\n        this.linkStyle={\n            color:'#2c3b40',\n            textDecoration: 'none',\n            fontSize: '1em',\n        }\n\n    }\n    getToken=(token)=>{\n        this.setState({csrfMiddleWareToken:token});\n    }\n    addLikes=()=>{\n        const url = `api/v1/tweets/like/`;\n        Request.post(url)\n        .set(\"X-CSRFToken\", this.state.csrfMiddleWareToken)\n        .send({\n            'tweet':parseInt(this.props.tweet.id),\n        })\n        .then(response=>console.log(response.data))\n        .catch(console.error);\n        // fetch(url)\n        // .then(response=>response.json())\n        // .then(data=>console.log(data))\n    }\n    render(\n    ) { \n        return ( \n            <div className=\"tweet\">\n                <CsrfToken get_token={this.getToken}/>\n                <img src=\"http://via.placeholder.com/50\" />\n                <p>{this.props.username}</p>\n                <p>\n                {this.props.tweet}\n                </p>\n                <p>{this.props.likes.length}</p>\n                <span \n                    className={this.props.likes<1?\"likes fa fa-heart\":\"likes fa fa-heart red-heart\"} \n                    aria-hidden=\"true\" onClick={this.addLikes}>{this.props.likes} likes</span>\n                <span className=\"retweets fa fa-retweet\">{this.props.retweets} retweets</span>\n               <span className=\"comments fa fa-comments\">\n                    <Link style={this.linkStyle} to={`/comments/${this.props.id}/`}>\n                        {this.props.comments} {this.props.comments==1?\"comment\":\"comments\"}\n                    </Link>\n                </span>\n               \n            </div>\n         );\n    }\n}\n \nexport default Tweet;","import React, { Component } from 'react';\nimport Request from \"superagent\";\nimport  CsrfToken from '../csrfToken';\n\n\nclass  NewTweet extends Component {\n    constructor(props){\n        super(props);\n        this.state = { \n            csrfMiddleWareToken:'',\n            tweet:''\n         }\n        \n    }\n    getToken=(token)=>{\n        this.setState({csrfMiddleWareToken:token});\n    }\n    form_submit=(e)=>{\n        e.preventDefault();\n        const url = 'api/v1/tweets/add/';\n        Request.post(url)\n        .set(\"X-CSRFToken\", this.state.csrfMiddleWareToken)\n        .send({\n            // 'csrfmiddlewaretoken': this.state.csrfMiddleWareToken,\n            'tweet':this.state.tweet\n        })\n        .then(response=>console.log(\"error\"))\n        .catch(console.error);\n\n\n    }\n    render() { \n        return ( \n            <div className=\"test\">\n                <form className=\"new-tweet\" onSubmit={this.form_submit} method=\"POST\">\n                    <CsrfToken get_token={this.getToken}/>\n                    <textarea  rows=\"10\" cols=\"100\" onChange={e=>this.setState({tweet:e.target.value})}>\n                        Whats on your mind\n                    </textarea>\n                    <input type=\"submit\" className=\"btn\" value=\"submit\"/>\n                </form>\n            </div>\n         );\n    }\n}\n \nexport default NewTweet;","import React, { Component } from 'react';\nimport Request from \"superagent\";\nimport comments from './comments.css';\nimport  CsrfToken from '../csrfToken';\n\nclass Comments extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            comments:[],\n            newComment:\"\",\n            csrfMiddleWareToken:'',\n        }\n        \n    }\n    fetchComments=()=>{\n        const url = `api/v1/tweets/comment/${this.props.match.params.id}`;\n        fetch(url)\n        .then(response=>response.json())\n        .then(data=>this.setState({\n            comments: data\n        }))\n      }\n    componentWillMount=()=>{\n        this.fetchComments(this.props.match.params);\n        console.log()\n    }\n    getToken=(token)=>{\n        this.setState({csrfMiddleWareToken:token});\n    }\n    followUser=(e)=>{\n        const url = `api/v1/tweets/follow/`;\n        Request.post(url)\n        .set(\"X-CSRFToken\", this.state.csrfMiddleWareToken)\n        .send({\n            // 'csrfmiddlewaretoken': this.state.csrfMiddleWareToken,\n            'to_follow':parseInt(e.target.id),\n        })\n        .then(response=>console.log(\"success\"))\n        .catch(console.error);\n    }\n    formSubmit=(e)=>{\n        e.preventDefault();\n        const url = 'api/v1/tweets/comment/add/';\n        Request.post(url)\n        .set(\"X-CSRFToken\", this.state.csrfMiddleWareToken)\n        .send({\n            // 'csrfmiddlewaretoken': this.state.csrfMiddleWareToken,\n            'tweet':parseInt(this.props.match.params.id),\n            'comment':this.state.newComment\n        })\n        .then(response=>console.log(\"error\"))\n        .catch(console.error);\n\n\n    }\n    render() { \n        return ( \n            <div>\n                <div className=\"row\">\n                    <div className=\"new-comment\">\n                        <form method=\"POST\" onSubmit={this.formSubmit}>\n                            <CsrfToken get_token={this.getToken}/>\n                            <h4>Add a new comment</h4>\n                            <textarea rows=\"5\" cols=\"100\" onChange={e=>this.setState({newComment:e.target.value})}>\n                            \n                            </textarea >\n                            <input type=\"submit\" className=\"btn\" value=\"submit\"/>\n                        </form>\n                        \n                    </div>\n                    <div className=\"comments\">\n                        <h3>Comments</h3>\n                        {this.state.comments.length?\n                            this.state.comments.map(comment=>{\n                                return <div className=\"comment\">\n                                        <h4>User {comment.user}: {comment.comment}</h4>\n                                        {parseInt(this.props.match.params.id)!==parseInt(comment.user)?\n                                            <button className=\"btn\" id={comment.user} onClick={this.followUser}>follow</button>\n                                        :null}\n                                    </div>\n                            }):\n                            <h4>There are no comments for this tweet!</h4>\n                        }\n                    \n                    </div>\n                </div>\n            </div>\n         );\n    }\n}\n\n\n\nexport default Comments;","import React, { Component } from 'react';\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport './styles.css';\nimport Nav from './Components/nav/nav.js';\nimport Tweet from './Components/tweet/tweet.js';\nimport NewTweet from './Components/tweet/newTweet';\nimport Comments from './Components/comments/comments';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      tweets:[\n      \n      ],\n    }\n  }\n  getLoggedInUser=()=>{\n    const url = \"api/v1/tweets/user/id\";\n    fetch(url)\n    .then(response=>response.json())\n    .then(data=>console.log(data))\n  }\n  reload_tweets=()=>{\n    const url = \"api/v1/tweets/\";\n    fetch(url)\n    .then(response=>response.json())\n    .then(data=>this.setState({tweets:data}))\n  }\n\n    componentWillMount=()=>{\n      this.getLoggedInUser();\n      this.reload_tweets();\n\n    }\n  \n  render(\n    ) \n    \n    {\n      return (\n        <div>\n          <HashRouter>\n              <Nav/>\n                <div class=\"container\">\n                    <div className=\"row\">\n                        <Route exact path=\"/\">\n                            <section class=\"profile\">\n                                    <h1>Profile</h1>\n                                    <img src=\"https://via.placeholder.com/50C/O https://placeholder.com/\"/>\n                                    <h3>Username: squadran2003</h3>\n                                    <h4>10 Followers</h4>\n                                    <h4>12 Following</h4>\n                              </section>\n                              <section class=\"tweets\">\n                              {this.state.tweets.map((tweet)=>{\n                                return <Tweet \n                                          src={\"\"} \n                                          id={tweet.id}\n                                          user={tweet.user}\n                                          tweet={tweet.tweet} \n                                          username={tweet.username} \n                                          likes={tweet.likes.length} \n                                          comments={tweet.comments.length}\n                                          retweets={0}\n                                          >\n                                        </Tweet>\n                              })}\n                              </section>\n                        </Route>\n                    </div>\n                    <div className=\"row-fluid\">\n                      <Route exact path=\"/add\">\n                            <NewTweet/>\n                      </Route>\n                    </div>\n                    <div className=\"row-fluid\">\n                      <Route path=\"/comments/:id/\" component={Comments}/>\n                    </div>\n                            \n                </div>\n                <footer className=\"footer\">\n                  <h4>copy right&copy; dr twitter 2020-2022</h4>\n                </footer>\n          </HashRouter>\n        </div>\n      );\n  }\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}