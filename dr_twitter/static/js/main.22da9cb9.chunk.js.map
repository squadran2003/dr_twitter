{"version":3,"sources":["logo.svg","Components/nav/nav.js","Components/tweet/tweet.js","App.js","Components/csrfToken.js","Components/tweet/newTweet.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","linkStyle","color","textDecoration","fontSize","fontWeight","className","style","to","href","Tweet","props","src","this","username","tweet","likes","retweets","comments","Component","App","state","tweets","class","exact","path","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,2OC6B5BC,MAzBf,WACI,IAAMC,EAAU,CACZC,MAAM,QACNC,eAAgB,OAChBC,SAAU,QACVC,WAAY,QAEhB,OACI,6BACI,yBAAKC,UAAU,iBACX,wBAAIA,UAAU,OACd,wBAAIA,UAAU,QAAO,kBAAC,IAAD,CAAMC,MAAON,EAAWO,GAAG,KAA3B,SACrB,wBAAIF,UAAU,QAAO,kBAAC,IAAD,CAAMC,MAAON,EAAWO,GAAG,QAA3B,kBACrB,wBAAIF,UAAU,QAAO,kBAAC,IAAD,CAAMC,MAAON,EAAWO,GAAG,YAA3B,aAErB,wBAAIF,UAAU,aAAY,uBAAGG,KAAK,YAAR,eCO3BC,G,wDArBX,WAAYC,GAAO,uCACTA,G,qDAIN,OACI,yBAAKL,UAAU,SACX,yBAAKM,IAAKC,KAAKF,MAAMC,MACrB,2BAAIC,KAAKF,MAAMG,UACf,2BACCD,KAAKF,MAAMI,OAEZ,8BAAOF,KAAKF,MAAMK,MAAlB,UACA,8BAAOH,KAAKF,MAAMM,SAAlB,aACA,8BAAOJ,KAAKF,MAAMO,SAAlB,kB,GAfIC,cCmGLC,GCpGSD,YCCAA,Y,kDFMtB,WAAYR,GAAO,IAAD,8BAChB,cAAMA,IACDU,MAAQ,CACXC,OAAO,CACL,CACEV,IAAI,6DACJE,SAAS,eACTC,MAAM,4RAINC,MAAM,GACNC,SAAS,EACTC,SAAS,GAEX,CACEN,IAAI,6DACJE,SAAS,MACTC,MAAM,4RAINC,MAAM,EACNC,SAAS,GACTC,SAAS,GAEX,CACEN,IAAI,6DACJE,SAAS,OACTC,MAAM,4RAINC,MAAM,EACNC,SAAS,EACTC,SAAS,GAEX,CACEN,IAAI,6DACJE,SAAS,OACTC,MAAM,4RAINC,MAAM,EACNC,SAAS,EACTC,SAAS,KA9CC,E,qDAwDd,OACE,6BACG,kBAAC,EAAD,MACC,yBAAKK,MAAM,aACT,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACZ,6BAASF,MAAM,UACdV,KAAKQ,MAAMC,OAAOI,KAAI,SAACX,GACtB,OAAO,kBAAC,EAAD,CACGH,IAAKG,EAAMH,IACXG,MAAOA,EAAMA,MACbD,SAAUC,EAAMD,SAChBE,MAAOD,EAAMC,MACbE,SAAUH,EAAMG,SAChBD,SAAUF,EAAME,eAI5B,6BAASM,MAAM,WACT,uCACA,sDACA,4CACA,8CAGZ,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,QACZ,uEAIZ,4BAAQnB,UAAU,UAChB,yE,GAxFIa,cGGEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.22da9cb9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport {Link } from 'react-router-dom'; \nimport nav from './nav.css';\n\nfunction Nav(){\n    const linkStyle={\n        color:'white',\n        textDecoration: 'none',\n        fontSize: '1.2em',\n        fontWeight: 'bold'\n    }\n    return (\n        <div>\n            <nav className=\"nav-container\">\n                <ul className=\"nav\">\n                <li className=\"link\"><Link style={linkStyle} to=\"/\">Home</Link></li>\n                <li className=\"link\"><Link style={linkStyle} to=\"/add\">Add New Tweet</Link></li>\n                <li className=\"link\"><Link style={linkStyle} to=\"/profile\">Profile </Link></li>\n                \n                <li className=\"last-link\"><a href=\"/logout/\">Logout</a></li>\n\n                </ul>\n            </nav>\n        </div>\n      );\n    \n}\n\n\nexport default Nav;","import React, { Component } from 'react';\n\nimport tweet from './tweet.css';\n\nclass Tweet extends Component {\n    constructor(props){\n        super(props);\n\n    }\n    render() { \n        return ( \n            <div className=\"tweet\">\n                <img src={this.props.src}/>\n                <p>{this.props.username}</p>\n                <p>\n                {this.props.tweet}\n                </p>\n                <span>{this.props.likes} likes</span>\n                <span>{this.props.retweets} retweets</span>\n                <span>{this.props.comments} comments</span>\n\n            </div>\n         );\n    }\n}\n \nexport default Tweet;","import React, { Component } from 'react';\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport './styles.css';\nimport Nav from './Components/nav/nav.js';\nimport Tweet from './Components/tweet/tweet.js';\nimport NewTweet from './Components/tweet/newTweet';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      tweets:[\n        {\n          src:\"https://via.placeholder.com/50C/O https://placeholder.com/\",\n          username:'squadran2003',\n          tweet:`Lorem Ipsum is simply dummy text of the printing and \n          typesetting industry. Lorem Ipsum has been the industry's \n          standard dummy text ever since the 1500s, when an unknown printer \n          took a galley of type and scrambled it to make a type specimen book.`,\n          likes:12,\n          retweets:4,\n          comments:5\n        },\n        {\n          src:\"https://via.placeholder.com/50C/O https://placeholder.com/\",\n          username:'leo',\n          tweet:`Lorem Ipsum is simply dummy text of the printing and \n          typesetting industry. Lorem Ipsum has been the industry's \n          standard dummy text ever since the 1500s, when an unknown printer \n          took a galley of type and scrambled it to make a type specimen book.`,\n          likes:5,\n          retweets:12,\n          comments:6\n        },\n        {\n          src:\"https://via.placeholder.com/50C/O https://placeholder.com/\",\n          username:'kath',\n          tweet:`Lorem Ipsum is simply dummy text of the printing and \n          typesetting industry. Lorem Ipsum has been the industry's \n          standard dummy text ever since the 1500s, when an unknown printer \n          took a galley of type and scrambled it to make a type specimen book.`,\n          likes:6,\n          retweets:4,\n          comments:5\n        },\n        {\n          src:\"https://via.placeholder.com/50C/O https://placeholder.com/\",\n          username:'kath',\n          tweet:`Lorem Ipsum is simply dummy text of the printing and \n          typesetting industry. Lorem Ipsum has been the industry's \n          standard dummy text ever since the 1500s, when an unknown printer \n          took a galley of type and scrambled it to make a type specimen book.`,\n          likes:6,\n          retweets:4,\n          comments:5\n        }\n      ]\n    }\n  }\n  \n  render(\n    ) \n    \n    {\n      return (\n        <div>\n           <Nav/>\n            <div class=\"container\">\n              <HashRouter>\n                  <Route exact path=\"/\">\n                        <section class=\"tweets\">\n                        {this.state.tweets.map((tweet)=>{\n                          return <Tweet \n                                    src={tweet.src} \n                                    tweet={tweet.tweet} \n                                    username={tweet.username} \n                                    likes={tweet.likes} \n                                    comments={tweet.comments}\n                                    retweets={tweet.retweets}>\n                                  </Tweet>\n                        })}\n                        </section>\n                        <section class=\"profile\">\n                              <h1>Profile</h1>\n                              <h3>Username: squadran2003</h3>\n                              <h4>10 Followers</h4>\n                              <h4>12 Following</h4>\n                        </section>\n                  </Route>\n                  <Route exact path=\"/add\">\n                        <h1>The add tweet component will go here</h1>\n                  </Route>\n              </HashRouter>\n            </div>\n            <footer className=\"footer\">\n              <h4>copy right&copy; dr twitter 2020-2022</h4>\n            </footer>\n        </div>\n      );\n  }\n}\nexport default App;\n\n\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass CsrfToken extends Component {\n\n  getCookie = name => {\n    var value;\n    if (document.cookie && document.cookie !== \"\") {\n      document.cookie.split(\";\").forEach(function(c) {\n        var m = c.trim().match(/(\\w+)=(.*)/);\n        if (m !== undefined && m[1] === name) {\n          value = decodeURIComponent(m[2]);\n        }\n      });\n    }\n    return value;\n  };\n  componentDidMount() {\n    const token = this.getCookie(\"csrftoken\");\n    this.props.get_token(token);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <input\n          type=\"hidden\"\n          name=\"csrfmiddlewaretoken\"\n          value={this.getCookie(\"csrftoken\")}\n        />\n      </React.Fragment>\n    );\n  }\n}\nCsrfToken.propTypes = {\n  get_token: PropTypes.func.isRequired\n};\n\nexport default CsrfToken;\n","import React, { Component } from 'react';\nimport  CsrfToken from '../csrfToken';\n\n\nclass  NewTweet extends Component {\n    state = {  }\n    render() { \n        return ( \n            <div>\n                <input type=\"text\" placeholder=\"whats on your mind!\"/>\n                <input type=\"button\" className=\"btn\"/>\n            </div>\n         );\n    }\n}\n \nexport default NewTweet;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}