{"version":3,"sources":["logo.svg","Components/nav/nav.js","Components/csrfToken.js","Components/tweet/tweet.js","Components/tweet/newTweet.js","Components/comments/comments.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","linkStyle","color","textDecoration","fontSize","fontWeight","className","style","to","href","CsrfToken","getCookie","name","value","document","cookie","split","forEach","c","m","trim","match","undefined","decodeURIComponent","token","this","props","get_token","Fragment","type","Component","Tweet","getToken","setState","csrfMiddleWareToken","addLikes","Request","post","set","state","send","parseInt","id","then","response","console","log","data","catch","error","tweetId","React","createRef","display","src","username","tweet","likes","length","aria-hidden","onClick","retweets","loggedInUserId","comments","NewTweet","form_submit","e","preventDefault","onSubmit","method","rows","cols","onChange","target","Comments","textBoxStyles","minWidth","btn","backgroundColor","height","padding","fetchComments","url","params","fetch","json","componentWillMount","followUser","formSubmit","newComment","map","comment","user","App","getLoggedInUser","getUserProfiler","profile","reload_tweets","tweets","class","exact","path","followers","following","component","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.dc9c2ca9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport {Link } from 'react-router-dom'; \nimport nav from './nav.css';\n\nfunction Nav(){\n    const linkStyle={\n        color:'white',\n        textDecoration: 'none',\n        fontSize: '1.2em',\n        fontWeight: 'bold'\n    }\n    return (\n        <div>\n            <nav className=\"nav-container\">\n                <ul className=\"nav\">\n                <li className=\"link\"><Link style={linkStyle} to=\"/\">Home</Link></li>\n                <li className=\"link\"><Link style={linkStyle} to=\"/add\">Add New Tweet</Link></li>\n                {/* <li className=\"link\"><Link style={linkStyle} to=\"/profile\">Profile </Link></li> */}\n                \n                <li className=\"last-link\"><a href=\"/logout/\">Logout</a></li>\n\n                </ul>\n            </nav>\n        </div>\n      );\n    \n}\n\n\nexport default Nav;","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass CsrfToken extends Component {\n\n  getCookie = name => {\n    var value;\n    if (document.cookie && document.cookie !== \"\") {\n      document.cookie.split(\";\").forEach(function(c) {\n        var m = c.trim().match(/(\\w+)=(.*)/);\n        if (m !== undefined && m[1] === name) {\n          value = decodeURIComponent(m[2]);\n        }\n      });\n    }\n    return value;\n  };\n  componentDidMount() {\n    const token = this.getCookie(\"csrftoken\");\n    this.props.get_token(token);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <input\n          type=\"hidden\"\n          name=\"csrfmiddlewaretoken\"\n          value={this.getCookie(\"csrftoken\")}\n        />\n      </React.Fragment>\n    );\n  }\n}\nCsrfToken.propTypes = {\n  get_token: PropTypes.func.isRequired\n};\n\nexport default CsrfToken;\n","import React, { Component } from 'react';\nimport {Link } from 'react-router-dom'; \nimport tweet from './tweet.css';\nimport Request from \"superagent\";\nimport  CsrfToken from '../csrfToken';\n\nclass Tweet extends Component {\n    constructor(props){\n        super(props);\n        this.tweetId = React.createRef();\n        this.csrfMiddleWareToken = \"\";\n        this.linkStyle={\n            color:'#fff',\n            textDecoration: 'none',\n            fontSize: '1em',\n            display:'inline'\n        }\n\n    }\n    getToken=(token)=>{\n        this.setState({csrfMiddleWareToken:token});\n    }\n    addLikes=()=>{\n        const url = `api/v1/tweets/like/`;\n        Request.post(url)\n        .set(\"X-CSRFToken\", this.state.csrfMiddleWareToken)\n        .send({\n            'tweet':parseInt(this.props.id),\n        })\n        .then(response=>console.log(response.data))\n        .catch(console.error);\n    }\n    render(\n    ) { \n        return ( \n            <div className=\"tweet\">\n                <CsrfToken get_token={this.getToken}/>\n                <img src=\"http://via.placeholder.com/50\" />\n                <p>{this.props.username}</p>\n                <p>\n                {this.props.tweet}\n                </p>\n                <p>{this.props.likes.length}</p>\n                <span \n                    className={this.props.likes<1?\"likes fa fa-heart\":\"likes fa fa-heart liked\"} \n                    aria-hidden=\"true\" onClick={this.addLikes}>{this.props.likes} likes</span>\n                <span className=\"retweets fa fa-retweet\">{this.props.retweets} retweets</span>\n                <div className=\"comments\">\n                    <span className=\"fa fa-comments\">\n                            <Link style={this.linkStyle} to={`/comments/${this.props.id}/${this.props.loggedInUserId}`}>\n                                {this.props.comments} {this.props.comments==1?\"comment\":\"comments\"}\n                            </Link>\n                    </span>\n                </div>\n               \n            </div>\n         );\n    }\n}\n \nexport default Tweet;","import React, { Component } from 'react';\nimport Request from \"superagent\";\nimport  CsrfToken from '../csrfToken';\n\n\nclass  NewTweet extends Component {\n    constructor(props){\n        super(props);\n        this.state = { \n            csrfMiddleWareToken:'',\n            tweet:''\n         }\n        \n    }\n    getToken=(token)=>{\n        this.setState({csrfMiddleWareToken:token});\n    }\n    form_submit=(e)=>{\n        e.preventDefault();\n        const url = 'api/v1/tweets/add/';\n        Request.post(url)\n        .set(\"X-CSRFToken\", this.state.csrfMiddleWareToken)\n        .send({\n            // 'csrfmiddlewaretoken': this.state.csrfMiddleWareToken,\n            'tweet':this.state.tweet\n        })\n        .then(response=>console.log(\"error\"))\n        .catch(console.error);\n\n\n    }\n    render() { \n        return ( \n            <div className=\"test\">\n                <form className=\"new-tweet\" onSubmit={this.form_submit} method=\"POST\">\n                    <CsrfToken get_token={this.getToken}/>\n                    <textarea  rows=\"10\" cols=\"100\" onChange={e=>this.setState({tweet:e.target.value})}>\n                        Whats on your mind\n                    </textarea>\n                    <input type=\"submit\" className=\"btn\" value=\"submit\"/>\n                </form>\n            </div>\n         );\n    }\n}\n \nexport default NewTweet;","import React, { Component } from 'react';\nimport Request from \"superagent\";\nimport comments from './comments.css';\nimport  CsrfToken from '../csrfToken';\n\nclass Comments extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            comments:[],\n            newComment:\"\",\n            csrfMiddleWareToken:'',\n        }\n        \n    }\n    textBoxStyles = {\n        minWidth:'100%'\n    }\n    btn={\n        backgroundColor: '#644892',\n        height:'50px',\n        color:'#FFFFFF',\n        padding:'2px',\n        fontSize: '1.1em',\n        minWidth:'20%',\n    }\n    fetchComments=()=>{\n        const url = `api/v1/tweets/comment/${this.props.match.params.id}`;\n        fetch(url)\n        .then(response=>response.json())\n        .then(data=>this.setState({comments:data}))\n        \n      }\n    componentWillMount=()=>{\n        this.fetchComments(this.props.match.params);\n    }\n    getToken=(token)=>{\n        this.setState({csrfMiddleWareToken:token});\n    }\n    followUser=(e)=>{\n        const url = `api/v1/accounts/follow/`;\n        Request.post(url)\n        .set(\"X-CSRFToken\", this.state.csrfMiddleWareToken)\n        .send({\n            // 'csrfmiddlewaretoken': this.state.csrfMiddleWareToken,\n            'to_follow':parseInt(e.target.id),\n        })\n        .then(response=>console.log(\"success\"))\n        .catch(console.error);\n    }\n    formSubmit=(e)=>{\n        e.preventDefault();\n        const url = 'api/v1/tweets/comment/add/';\n        Request.post(url)\n        .set(\"X-CSRFToken\", this.state.csrfMiddleWareToken)\n        .send({\n            // 'csrfmiddlewaretoken': this.state.csrfMiddleWareToken,\n            'tweet':parseInt(this.props.match.params.id),\n            'comment':this.state.newComment\n        })\n        .then(response=>console.log(\"error\"))\n        .catch(console.error);\n\n\n    }\n    render() { \n        return ( \n            <div>\n                <div className=\"comment-container\">\n                    <div className=\"new-comment\">\n                        <form method=\"POST\" onSubmit={this.formSubmit}>\n                            <CsrfToken get_token={this.getToken}/>\n                            <h4>Add a new comment</h4>\n                            <textarea style={this.textBoxStyles} rows=\"5\" onChange={e=>this.setState({newComment:e.target.value})}>\n                            \n                            </textarea >\n                            <input type=\"submit\" className=\"btn\" value=\"submit\"/>\n                        </form>\n                        \n                    </div>\n                    <div className=\"comments\">\n                        <h3>Comments</h3>\n                        {this.state.comments.length?\n                            this.state.comments.map(comment=>{\n                                return <div className=\"comment\">\n                                        <h4>{comment.username}: {comment.comment}</h4>\n                                        {parseInt(this.props.match.params.loggedInUserId)!==parseInt(comment.user)?\n                                            <button style={this.btn} id={comment.user} onClick={this.followUser}>follow</button>\n                                        :null}\n                                    </div>\n                            }):\n                            <h4>There are no comments for this tweet!</h4>\n                        }\n                    \n                    </div>\n                </div>\n            </div>\n         );\n    }\n}\n\n\n\nexport default Comments;","import React, { Component } from 'react';\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport './styles.css';\nimport Nav from './Components/nav/nav.js';\nimport Tweet from './Components/tweet/tweet.js';\nimport NewTweet from './Components/tweet/newTweet';\nimport Comments from './Components/comments/comments';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      tweets:[\n      \n      ],\n      profile:undefined,\n      loggedInUserId:-1,\n    }\n  }\n  getLoggedInUser=()=>{\n    const url = \"api/v1/tweets/user/id\";\n    fetch(url)\n    .then(response=>response.json())\n    .then(data=>this.setState({loggedInUserId:data.id}))\n  }\n  getUserProfiler=()=>{\n    const url = \"api/v1/accounts/profile/\";\n    fetch(url)\n    .then(response=>response.json())\n    .then(data=>this.setState({profile:data}))\n  }\n  reload_tweets=()=>{\n    const url = \"api/v1/tweets/\";\n    fetch(url)\n    .then(response=>response.json())\n    .then(data=>this.setState({tweets:data}))\n  }\n\n    componentWillMount=()=>{\n      this.getLoggedInUser();\n      this.getUserProfiler();\n      this.reload_tweets();\n\n    }\n  \n  render(\n    ) \n    \n    {\n      return (\n        <div>\n          <HashRouter>\n              <Nav/>\n                <div class=\"container\">\n                    <div className=\"row\">\n                        <Route exact path=\"/\">\n                            <section className=\"profile\">\n                                    <h1>Profile</h1>\n                                    <img src=\"https://via.placeholder.com/50C/O https://placeholder.com/\"/>\n                                    \n                                    <h3>Username: {this.state.profile!==undefined?this.state.profile.username:\"\"}</h3>\n                                    <h4>{this.state.profile!==undefined?this.state.profile.followers:null} Followers</h4>\n                                    <h4>{this.state.profile!==undefined?this.state.profile.following.length:null}  Following</h4>\n                              </section>\n                              <section className=\"tweets\">\n                              {this.state.tweets.map((tweet)=>{\n                                return <Tweet \n                                          src={\"\"} \n                                          id={tweet.id}\n                                          user={tweet.user}\n                                          tweet={tweet.tweet} \n                                          username={tweet.username} \n                                          likes={tweet.likes.length} \n                                          comments={tweet.comments.length}\n                                          retweets={0}\n                                          loggedInUserId={this.state.loggedInUserId}\n                                          >\n                                        </Tweet>\n                              })}\n                              </section>\n                        </Route>\n                    </div>\n                    <div className=\"row-fluid\">\n                      <Route exact path=\"/add\">\n                            <NewTweet/>\n                      </Route>\n                    </div>\n                    <div className=\"row-fluid\">\n                      <Route path=\"/comments/:id/:loggedInUserId/\" component={Comments}/>\n                    </div>\n                            \n                </div>\n                <footer className=\"footer\">\n                  <h4>copy right&copy; dr twitter 2020-2022</h4>\n                </footer>\n          </HashRouter>\n        </div>\n      );\n  }\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}